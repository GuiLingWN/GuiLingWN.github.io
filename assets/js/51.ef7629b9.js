(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{364:function(s,e,a){"use strict";a.r(e);var t=a(27),_=Object(t.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"精细化控制-ssh-访问-巧用-sshd-config-中的-allowusers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#精细化控制-ssh-访问-巧用-sshd-config-中的-allowusers"}},[s._v("#")]),s._v(" 精细化控制 SSH 访问：巧用 sshd_config 中的 AllowUsers")]),s._v(" "),e("p",[s._v("在管理 Linux 服务器时，安全性是重中之重。SSH 作为我们远程访问服务器的主要入口，其安全策略直接关系到整个系统的安危。除了使用密钥认证、修改默认端口等常规操作外，我们还可以通过配置 "),e("code",[s._v("sshd_config")]),s._v(" 文件中的 "),e("code",[s._v("AllowUsers")]),s._v(" 指令，实现对登录用户的白名单控制，从而进一步加固我们的服务器。")]),s._v(" "),e("h2",{attrs:{id:"什么是-allowusers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-allowusers"}},[s._v("#")]),s._v(" 什么是 "),e("code",[s._v("AllowUsers")]),s._v("？")]),s._v(" "),e("p",[e("code",[s._v("AllowUsers")]),s._v(" 是 OpenSSH 服务器配置文件（通常位于 "),e("code",[s._v("/etc/ssh/sshd_config")]),s._v("）中的一个指令。它的作用非常直接："),e("strong",[s._v("定义一个允许通过 SSH 登录到本机的用户白名单")]),s._v("。")]),s._v(" "),e("p",[s._v("一旦设置了这个指令，只有在名单上的用户才能成功登录，其他所有用户（无论密码或密钥是否正确）都将被拒绝访问。这是一种非常有效的访问控制手段，特别适用于那些用户账号固定、不希望随意创建新用户就能登录的生产环境。")]),s._v(" "),e("h2",{attrs:{id:"如何配置-allowusers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何配置-allowusers"}},[s._v("#")]),s._v(" 如何配置 "),e("code",[s._v("AllowUsers")])]),s._v(" "),e("p",[s._v("配置过程非常简单，只需三步：编辑配置、添加用户、重启服务。")]),s._v(" "),e("h3",{attrs:{id:"_1-编辑-sshd-config-文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-编辑-sshd-config-文件"}},[s._v("#")]),s._v(" 1. 编辑 "),e("code",[s._v("sshd_config")]),s._v(" 文件")]),s._v(" "),e("p",[s._v("使用你喜欢的文本编辑器打开 SSH 配置文件：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("nano")]),s._v(" /etc/ssh/sshd_config\n")])])]),e("h3",{attrs:{id:"_2-添加-allowusers-指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-添加-allowusers-指令"}},[s._v("#")]),s._v(" 2. 添加 "),e("code",[s._v("AllowUsers")]),s._v(" 指令")]),s._v(" "),e("p",[s._v("在文件的任意位置（通常建议放在认证相关的配置区域），添加 "),e("code",[s._v("AllowUsers")]),s._v(" 指令，后面跟上允许登录的用户名，用户名之间用空格隔开。")]),s._v(" "),e("p",[e("strong",[s._v("示例：")])]),s._v(" "),e("p",[s._v("假设你只希望 "),e("code",[s._v("root")]),s._v("、"),e("code",[s._v("user1")]),s._v(" 和 "),e("code",[s._v("user2")]),s._v(" 这三个用户能够登录服务器，你可以这样配置：")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("AllowUsers root user1 user2\n")])])]),e("p",[e("strong",[s._v("更高级的用法：")])]),s._v(" "),e("p",[e("code",[s._v("AllowUsers")]),s._v(" 还支持 "),e("code",[s._v("user@host")]),s._v(" 的格式，用于限制特定用户只能从特定的 IP 或主机名登录。")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("# 只允许 user1 从 192.168.1.100 登录\nAllowUsers user1@192.168.1.100\n\n# 允许使用通配符\n# 允许所有来自 .example.com 域的用户登录\nAllowUsers *@*.example.com\n")])])]),e("h3",{attrs:{id:"_3-重启-ssh-服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-重启-ssh-服务"}},[s._v("#")]),s._v(" 3. 重启 SSH 服务")]),s._v(" "),e("p",[s._v("修改配置后，必须重启 "),e("code",[s._v("sshd")]),s._v(" 服务才能使其生效。")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对于使用 systemd 的系统 (如 Debian, Ubuntu, CentOS 7+)")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl restart sshd\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对于使用 init.d 的旧系统")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" /etc/init.d/sshd restart\n")])])]),e("p",[s._v("重启之后，新的访问规则就立即生效了。此时，如果你尝试用一个未在 "),e("code",[s._v("AllowUsers")]),s._v(" 列表中的用户登录，即便密码正确，也会被服务器拒绝。")]),s._v(" "),e("h2",{attrs:{id:"allow-deny-指令的处理顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#allow-deny-指令的处理顺序"}},[s._v("#")]),s._v(" Allow/Deny 指令的处理顺序")]),s._v(" "),e("p",[s._v("值得注意的是，"),e("code",[s._v("sshd")]),s._v(" 服务中有一套完整的用户和组的访问控制指令，它们的处理顺序是固定的：")]),s._v(" "),e("ol",[e("li",[e("code",[s._v("DenyUsers")]),s._v(" （拒绝用户列表）")]),s._v(" "),e("li",[e("code",[s._v("AllowUsers")]),s._v(" （允许用户列表）")]),s._v(" "),e("li",[e("code",[s._v("DenyGroups")]),s._v(" （拒绝组列表）")]),s._v(" "),e("li",[e("code",[s._v("AllowGroups")]),s._v(" （允许组列表）")])]),s._v(" "),e("p",[e("code",[s._v("sshd")]),s._v(" 会按这个顺序依次检查。例如，如果一个用户同时出现在 "),e("code",[s._v("DenyUsers")]),s._v(" 和 "),e("code",[s._v("AllowUsers")]),s._v(" 中，因为 "),e("code",[s._v("DenyUsers")]),s._v(" 先被处理，所以该用户最终会被拒绝登录。")]),s._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),e("p",[s._v("通过配置 "),e("code",[s._v("AllowUsers")]),s._v("，我们为服务器的 SSH 入口增加了一道坚固的“白名单”防火墙。这个看似简单的配置，却能有效地防止未经授权的账户访问系统，极大地提升了服务器的安全性。在对服务器权限有严格要求的场景下，这是一个非常值得推荐的安全实践。")])])}),[],!1,null,null,null);e.default=_.exports}}]);